#!/usr/bin/env python
import argparse
import multiprocessing as mp
import os
import re
import subprocess
import sys
import logging

import bluetool


def hciconfig(*args):
    cmd = ['hciconfig']
    cmd.extend(args)
    return subprocess.check_output(cmd)


def hci_get_devs():
    dev_info_lines = hciconfig().splitlines()
    cur_dev = None
    devs = {}
    for line in dev_info_lines:
        m = re.match('^(hci[0-9]+)', line)
        if m is not None:
            cur_dev = m.group(1)
            devs[cur_dev] = 0
        if re.search('\\bUP\\b', line) is not None:
            devs[cur_dev] = 1
    return devs


def hci_ifup(dev):
    hciconfig(dev, 'up')


def hci_ifdown(dev):
    hciconfig(dev, 'down')


def bluetest_setup(log_level):
    devs = hci_get_devs()
    for dev, enabled in devs.iteritems():
        if enabled:
            hci_ifdown(dev)

    bluetool.log_to_stream()
    bluetool.log_set_level(log_level)


def _bluetest_run_file(filename, dev_list, pipe):
    ret = bluetool.run_bluetest(filename, dev_list)
    pipe.send(ret)


def bluetest_run_file(filename, dev_list=None):
    # Create new process to cleanly import bluetest module
    parent_conn, child_conn = mp.Pipe()
    p = mp.Process(target=_bluetest_run_file,
                   args=(filename, dev_list, child_conn))
    p.start()
    ret = parent_conn.recv()
    p.join()
    return ret


def bluetest_run_path(paths, dev_list=None):
    ret = 0
    for path in paths:
        if os.path.isdir(path):
            for dirpath, dnames, fnames in os.walk(path):
                for fname in fnames:
                    mod_name, ext = os.path.splitext(fname)
                    if ext == '.py':
                        filename = os.path.join(dirpath, fname)
                        ret |= bluetest_run_file(filename, dev_list)
        else:
            ret |= bluetest_run_file(path, dev_list)
    return ret


def parse_dev_list(dev_list_str):
    dev_list = []
    for devs in dev_list_str.split(','):
        if devs.isdigit():
            dev_list.append(int(devs))
        else:
            m = re.match('^([0-9]+)-([0-9]+)$', devs)
            if m is None:
                raise bluetool.error.Error('unsupported device format string')
            dev_from = int(m.group(1))
            dev_to = int(m.group(2))
            step = 1 if dev_from <= dev_to else -1
            dev_list.extend(range(dev_from, dev_to + step, step))
    return dev_list


def parse_log_level(log_level):
    level_str = log_level.upper()
    if level_str not in {'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'}:
        level_str = 'INFO'
    return getattr(logging, level_str)


def _parse_cmdline_args(argv):
    parser = argparse.ArgumentParser(description='Run bluetool test case')
    parser.add_argument('path', nargs='+', help='Path of test scrtip')
    parser.add_argument(
        '-i', '--devices', type=parse_dev_list, default=None,
        help='Device list (e.g. 0-1,3 means 0,1,3)')
    parser.add_argument(
        '-l', '--log_level', type=parse_log_level, default=logging.INFO,
        help='Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)')
    return parser.parse_args()


def _main(argv=None):
    if argv is None:
        argv = sys.argv
    args = _parse_cmdline_args(argv)

    bluetest_setup(args.log_level)
    return bluetest_run_path(args.path, args.devices)


if __name__ == "__main__":
    sys.exit(_main())
